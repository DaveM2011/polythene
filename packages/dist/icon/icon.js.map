{"version":3,"sources":["../../src/src/icon/icon.js"],"names":["CSS_CLASSES","icon","avatar","small","regular","medium","large","typeClasses","classForType","mode","layoutContent","opts","content","svg","svgOpts","tag","msvg","trust","src","createView","ctrl","props","class","type","join","id","config","events","before","after","component","controller","redraw","strategy","view"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,cAAc;AAChBC,UAAM,SADU;AAEhBC,YAAQ,iBAFQ;AAGhBC,WAAO,gBAHS;AAIhBC,aAAS,kBAJO;AAKhBC,YAAQ,iBALQ;AAMhBC,WAAO;AANS,CAApB;;AASA,IAAMC,cAAc;AAChBJ,WAAOH,YAAYG,KADH;AAEhBC,aAASJ,YAAYI,OAFL;AAGhBC,YAAQL,YAAYK,MAHJ;AAIhBC,WAAON,YAAYM;AAJH,CAApB;;AAOA,IAAME,eAAe,SAAfA,YAAe,GAAsB;AAAA,QAArBC,IAAqB,uEAAd,SAAc;;AACvC,WAAOF,YAAYE,IAAZ,CAAP;AACH,CAFD;;AAIA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC5B,QAAIA,KAAKC,OAAT,EAAkB;AACd,eAAOD,KAAKC,OAAZ;AACH,KAFD,MAEO,IAAID,KAAKE,GAAT,EAAc;AACjB,YAAIC,UAAU,SAAc,EAAd,EAAkBH,KAAKE,GAAvB,CAAd;AACAC,gBAAQC,GAAR,GAAcD,QAAQC,GAAR,IAAe,GAA7B;AACA,eAAO,sCAAOD,OAAP,CAAP;AACH,KAJM,MAIA,IAAIH,KAAKK,IAAT,EAAe;AAClB,eAAO,uBAAE,UAAF,EAAc,kBAAEC,KAAF,CAAQN,KAAKK,IAAb,CAAd,CAAP;AACH,KAFM,MAEA;AACH,eAAO,uBAAE,GAAF,EACH,uBAAE,KAAF,EAAS;AACLE,iBAAKP,KAAKO;AADL,SAAT,CADG,CAAP;AAKH;AACJ,CAhBD;;AAkBA,IAAMC,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAqB;AAAA,QAAdT,IAAc,uEAAP,EAAO;;AACpC,QAAMI,MAAMJ,KAAKI,GAAL,IAAY,KAAxB;AACA,QAAMM,QAAQ,SAAc,EAAd,EACV;AACIC,eAAO,CAACtB,YAAYC,IAAb,EAAmBO,aAAaG,KAAKY,IAAlB,CAAnB,EAA4CZ,KAAKW,KAAjD,EAAwDE,IAAxD,CAA6D,GAA7D,CADX;AAEIC,YAAId,KAAKc,EAAL,IAAW,EAFnB;AAGIC,gBAAQf,KAAKe;AAHjB,KADU,EAMVf,KAAKgB,MAAL,GAAchB,KAAKgB,MAAnB,GAA4B,IANlB,CAAd;AAQA,QAAMf,UAAUF,cAAcC,IAAd,CAAhB;AACA,WAAO,uBAAEI,GAAF,EAAOM,KAAP,EAAc,CAACV,KAAKiB,MAAN,EAAchB,OAAd,EAAuBD,KAAKkB,KAA5B,CAAd,CAAP;AACH,CAZD;;AAcA,IAAMC,YAAY;AACdC,gBAAY,sBAAM;AACd,0BAAEC,MAAF,CAASC,QAAT,CAAkB,MAAlB;AACH,KAHa;AAIdC,UAAM,cAACd,IAAD,EAAqB;AAAA,YAAdT,IAAc,uEAAP,EAAO;;AACvB,eAAOQ,WAAWC,IAAX,EAAiBT,IAAjB,CAAP;AACH;AANa,CAAlB;;kBASemB,S","file":"icon.js","sourcesContent":["import '../common/object.assign';\nimport m from 'mithril';\nimport svg from '../svg/svg';\nimport './theme';\n\nconst CSS_CLASSES = {\n    icon: 'pe-icon',\n    avatar: 'pe-icon--avatar',\n    small: 'pe-icon--small',\n    regular: 'pe-icon--regular',\n    medium: 'pe-icon--medium',\n    large: 'pe-icon--large'\n};\n\nconst typeClasses = {\n    small: CSS_CLASSES.small,\n    regular: CSS_CLASSES.regular,\n    medium: CSS_CLASSES.medium,\n    large: CSS_CLASSES.large\n};\n\nconst classForType = (mode = 'regular') => {\n    return typeClasses[mode];\n};\n\nconst layoutContent = (opts) => {\n    if (opts.content) {\n        return opts.content;\n    } else if (opts.svg) {\n        let svgOpts = Object.assign({}, opts.svg);\n        svgOpts.tag = svgOpts.tag || 'i';\n        return m(svg, svgOpts);\n    } else if (opts.msvg) {\n        return m('i.pe-svg', m.trust(opts.msvg));\n    } else {\n        return m('i',\n            m('img', {\n                src: opts.src\n            })\n        );\n    }\n};\n\nconst createView = (ctrl, opts = {}) => {\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [CSS_CLASSES.icon, classForType(opts.type), opts.class].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    const content = layoutContent(opts);\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst component = {\n    controller: () => {\n        m.redraw.strategy('none');\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}