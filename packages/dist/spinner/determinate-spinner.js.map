{"version":3,"sources":["../../src/src/spinner/determinate-spinner.js"],"names":["CSS_CLASSES","block","animation","circle","circleRight","circleLeft","sizeFromType","type","percentageValue","min","max","percentage","rotateCircle","el","style","animate","ctrlEl","size","animationEl","querySelector","animationElStyle","clip","leftCircle","rightCircle","Math","handlePercentage","ctrl","opts","_previousPercentage","animated","STEP_DURATION","updateDuration","start","step","timestamp","progress","stepPercentage","newPercentage","easeInOutQuad","window","requestAnimationFrame","component","view","content","class","join","getPercentage"],"mappings":"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","file":"determinate-spinner.js","sourcesContent":["/*\nDerived from https://github.com/PolymerElements/paper-spinner\n\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport m from 'mithril';\nimport spinner from './spinner';\nimport './theme/determinate/theme';\nimport themeConfig from './theme/determinate/config';\nimport easing from '../common/easing';\n\nconst CSS_CLASSES = {\n    block: 'pe-spinner-determinate',\n    animation: 'pe-spinner-determinate__animation',\n    circle: 'pe-spinner-determinate__circle',\n    circleRight: 'pe-spinner-determinate__circle--right',\n    circleLeft: 'pe-spinner-determinate__circle--left'\n};\n\nconst sizeFromType = (type = 'regular') => (themeConfig['size_' + type]);\n\nconst percentageValue = (min, max, percentage) => (min + ((max - min) * percentage));\n\nconst rotateCircle = (el, min, max, percentage) => {\n    const style = el.style;\n    style['transform'] =\n        style['-webkit-transform'] =\n        style['-moz-transform'] =\n        style['-ms-transform'] =\n        style['-o-transform'] = 'rotate(' + percentageValue(min, max, percentage) + 'deg)';\n};\n\nconst animate = (ctrlEl, size, percentage) => {\n    const animationEl = ctrlEl.querySelector('.' + CSS_CLASSES.animation);\n    const animationElStyle = animationEl.style;\n\n    if (percentage < 0.5) {\n        animationElStyle.clip = 'rect(0px, ' + size + 'px, ' + size + 'px, ' + size / 2 + 'px)';\n    } else {\n        animationElStyle.clip = 'rect(auto, auto, auto, auto)';\n    }\n\n    const leftCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleLeft);\n    const rightCircle = ctrlEl.querySelector('.' + CSS_CLASSES.circleRight);\n    leftCircle.style.clip = rightCircle.style.clip = 'rect(0px, ' + size / 2 + 'px, ' + size + 'px, ' + '0px)';\n    rotateCircle(rightCircle, 0, 180, Math.min(1, percentage * 2));\n    rotateCircle(leftCircle, 0, 360, percentage);\n};\n\nconst handlePercentage = (percentage, ctrl, size, opts = {}) => {\n    if (!ctrl.el) {\n        return;\n    }\n\n    ctrl._previousPercentage = ctrl._previousPercentage || 0;\n\n    if (opts.animated && ctrl._previousPercentage !== percentage) {\n        const STEP_DURATION = opts.updateDuration * 1000;\n        let start = null;\n        const step = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            const stepPercentage = 1.0 / STEP_DURATION * progress;\n            const newPercentage = ctrl._previousPercentage + stepPercentage * (percentage - ctrl._previousPercentage);\n            animate(ctrl.el, size, easing.easeInOutQuad(newPercentage));\n            ctrl._previousPercentage = newPercentage;\n            if (start && progress < STEP_DURATION) {\n                window.requestAnimationFrame(step);\n            } else {\n                start = null;\n            }\n        };\n        window.requestAnimationFrame(step);\n    } else {\n        animate(ctrl.el, size, percentage);\n        ctrl._previousPercentage = percentage;\n    }\n};\n\nconst component = {\n    view: (ctrl, opts = {}) => {\n        const size = sizeFromType(opts.type);\n        opts.content = m('div',\n            {\n                class: CSS_CLASSES.animation\n            }, [\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleLeft].join(' ')\n                }),\n                m('div', {\n                    class: [CSS_CLASSES.circle, CSS_CLASSES.circleRight].join(' ')\n                })\n            ]\n        );\n        opts.class = [\n            CSS_CLASSES.block,\n            opts.class\n        ].join(' ');\n        opts.getPercentage = (percentage, ctrl) => (handlePercentage(percentage, ctrl, size, opts));\n        return m(spinner, opts);\n    }\n};\n\nexport default component;\n"]}