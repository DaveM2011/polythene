{"version":3,"sources":["../../src/src/svg/svg.js"],"names":["CSS_CLASSES","block","globalCache","createView","ctrl","opts","content","svg","tag","props","class","join","id","config","events","path","src","trust","preloadNext","loadSvg","then","redraw","before","after","preloading","System","import","normalizedName","normalizeSync","data","preloadingIndex","console","log","preloadingItems","length","next","component","controller","strategy","prop","preload","view"],"mappings":"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","file":"svg.js","sourcesContent":["import '../common/object.assign';\nimport m from 'mithril';\n\nconst CSS_CLASSES = {\n    block: 'pe-svg'\n};\n\nconst globalCache = {};\n\nconst createView = (ctrl, opts = {}) => {\n    let content, svg;\n    const tag = opts.tag || 'div';\n    const props = Object.assign({},\n        {\n            class: [CSS_CLASSES.block, opts.class].join(' '),\n            id: opts.id || '',\n            config: opts.config\n        },\n        opts.events ? opts.events : null\n    );\n    if (opts.content) {\n        content = opts.content;\n    } else {\n        const path = opts.src;\n        if (ctrl.path() !== path) {\n            // not the current svg\n            svg = globalCache[path];\n            if (svg) {\n                // exists in cache\n                content = m.trust(svg);\n                preloadNext(ctrl, opts);\n            } else {\n                // load new, then wait until file has been loaded\n                ctrl.path(path);\n                loadSvg(path, ctrl, opts).then(m.redraw);\n            }\n        } else {\n            // use the current svg\n            svg = ctrl.svg();\n            svg = svg || '';\n            content = m.trust(svg);\n            preloadNext(ctrl, opts);\n        }\n    }\n    return m(tag, props, [opts.before, content, opts.after]);\n};\n\nconst loadSvg = (path, ctrl, opts, preloading = false) => {\n    if (System && System.import) {\n        const normalizedName = System.normalizeSync(path);\n        return System.import(normalizedName).then(function(data) {\n            if (preloading) {\n                globalCache[path] = data;\n                ctrl.preloadingIndex++;\n                preloadNext(ctrl, opts);\n            } else {\n                ctrl.svg(data);\n            }\n        });\n    } else {\n        if (console) {\n            console.log('polythene/svg: System not found.');\n        }\n    }\n};\n\nconst preloadNext = (ctrl, opts) => {\n    if (!ctrl.preloadingItems) {\n        return;\n    }\n    if (ctrl.preloadingIndex >= ctrl.preloadingItems.length) {\n        return;\n    }\n    const next = ctrl.preloadingItems[ctrl.preloadingIndex];\n    if (!globalCache[next]) {\n        loadSvg(next, ctrl, opts, true);\n    } else {\n        ctrl.preloadingIndex++;\n        preloadNext(ctrl, opts);\n    }\n};\n\nconst component = {\n    controller: (opts = {}) => {\n        m.redraw.strategy('none');\n        return {\n            path: m.prop(''),\n            svg: m.prop(''),\n            preloadingItems: opts.preload,\n            preloadingIndex: 0\n        };\n    },\n    view: (ctrl, opts = {}) => {\n        return createView(ctrl, opts);\n    }\n};\n\nexport default component;\n"]}