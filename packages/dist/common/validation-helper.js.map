{"version":3,"sources":["../../src/src/common/validation-helper.js"],"names":["opts","elProp","element","invalidProp","invalid","fieldStates","submit","e","onValidated","preventDefault","firstInvalidIndex","getInvalidIndex","undefined","focus","getIndex","el","i","length","update","state","index","push"],"mappings":";;;;;;kBACe,YAAe;AAAA,QAAdA,IAAc,uEAAP,EAAO;;AAC1B,QAAMC,SAASD,KAAKE,OAAL,IAAgB,IAA/B;AACA,QAAMC,cAAcH,KAAKI,OAAL,IAAgB,SAApC;;AAEA,QAAMC,cAAc,EAApB;;AAEA,QAAMC,SAAS,SAATA,MAAS,CAACC,CAAD,EAAIC,WAAJ,EAAoB;AAC/BD,UAAEE,cAAF;AACA,YAAMC,oBAAoBC,iBAA1B;AACA,YAAID,sBAAsBE,SAA1B,EAAqC;AACjC,gBAAIP,YAAYK,iBAAZ,EAA+BT,MAA/B,CAAJ,EAA4C;AACxCI,4BAAYK,iBAAZ,EAA+BT,MAA/B,EAAuCY,KAAvC;AACH;AACJ,SAJD,MAIO;AACHL,wBAAYD,CAAZ;AACH;AACJ,KAVD;;AAYA,QAAMO,WAAW,SAAXA,QAAW,CAACC,EAAD,EAAQ;AACrB,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIX,YAAYY,MAAhC,EAAwCD,GAAxC,EAA6C;AACzC,gBAAIX,YAAYW,CAAZ,EAAef,MAAf,MAA2Bc,EAA/B,EAAmC;AAC/B,uBAAOC,CAAP;AACH;AACJ;AACJ,KAND;;AAQA,QAAML,kBAAkB,SAAlBA,eAAkB,GAAM;AAC1B,aAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAIX,YAAYY,MAAhC,EAAwCD,GAAxC,EAA6C;AACzC,gBAAIX,YAAYW,CAAZ,EAAeb,WAAf,CAAJ,EAAiC;AAC7B,uBAAOa,CAAP;AACH;AACJ;AACJ,KAND;;AAQA,QAAME,SAAS,SAATA,MAAS,CAACC,KAAD,EAAW;AACtB,YAAMC,QAAQN,SAASK,MAAMlB,MAAN,CAAT,CAAd;AACA,YAAImB,UAAUR,SAAd,EAAyB;AACrBP,wBAAYgB,IAAZ,CAAiBF,KAAjB;AACH,SAFD,MAEO;AACHd,wBAAYe,KAAZ,IAAqBD,KAArB;AACH;AACJ,KAPD;;AASA,WAAO;AACHb,sBADG;AAEHY;AAFG,KAAP;AAIH,C","file":"validation-helper.js","sourcesContent":["\nexport default (opts = {}) => {\n    const elProp = opts.element || 'el';\n    const invalidProp = opts.invalid || 'invalid';\n\n    const fieldStates = [];\n\n    const submit = (e, onValidated) => {\n        e.preventDefault();\n        const firstInvalidIndex = getInvalidIndex();\n        if (firstInvalidIndex !== undefined) {\n            if (fieldStates[firstInvalidIndex][elProp]) {\n                fieldStates[firstInvalidIndex][elProp].focus();\n            }\n        } else {\n            onValidated(e);\n        }\n    };\n\n    const getIndex = (el) => {\n        for (let i = 0; i < fieldStates.length; i++) {\n            if (fieldStates[i][elProp] === el) {\n                return i;\n            }\n        }\n    };\n\n    const getInvalidIndex = () => {\n        for (let i = 0; i < fieldStates.length; i++) {\n            if (fieldStates[i][invalidProp]) {\n                return i;\n            }\n        }\n    };\n\n    const update = (state) => {\n        const index = getIndex(state[elProp]);\n        if (index === undefined) {\n            fieldStates.push(state);\n        } else {\n            fieldStates[index] = state;\n        }\n    };\n\n    return {\n        submit,\n        update\n    };\n};\n"]}